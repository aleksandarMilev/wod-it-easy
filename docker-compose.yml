services:
  sqlserver:
    container_name: wod-it-easy-sql-server
    image: mcr.microsoft.com/mssql/server:2022-latest
    ports:
      - "1433:1433"
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=YourStrong!Password123
    volumes:
      - sqldata:/var/opt/mssql
    networks:
      - wod-it-easy-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          '/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "$${SA_PASSWORD}" -Q "SELECT 1"',
        ]
      interval: 10s
      timeout: 5s
      retries: 10

  rabbitmq:
    container_name: wod-it-easy-rabbitmq
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    hostname: "rabbitmq"
    environment:
      - RABBITMQ_DEFAULT_USER=rabbitmquser
      - RABBITMQ_DEFAULT_PASS=rabbitmqPassword12!
    volumes:
      - rabbitmq:/var/lib/rabbitmq/mnesia
    networks:
      - wod-it-easy-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 10s
      retries: 10

  identity:
    container_name: wod-it-easy-identity
    build:
      context: ./server
      dockerfile: Identity/Identity.StartUp/Dockerfile
    ports:
      - "5000:8080"
    environment:
      - ConnectionStrings__DefaultConnection=Server=wod-it-easy-sql-server;Database=WodItEasyIdentityDb;User Id=sa;Password=YourStrong!Password123;TrustServerCertificate=True;Encrypt=True;MultipleActiveResultSets=true;
      - MessageQueueSettings__Host=rabbitmq
      - MessageQueueSettings__UserName=rabbitmquser
      - MessageQueueSettings__Password=rabbitmqPassword12!
    restart: on-failure
    networks:
      - wod-it-easy-network
    depends_on:
      rabbitmq:
        condition: service_healthy
      sqlserver:
        condition: service_started

  workouts:
    container_name: wod-it-easy-workouts
    build:
      context: ./server
      dockerfile: Workouts/Workouts.StartUp/Dockerfile
    ports:
      - "5001:8080"
    environment:
      - ConnectionStrings__DefaultConnection=Server=wod-it-easy-sql-server;Database=WodItEasyWorkoutsDb;User Id=sa;Password=YourStrong!Password123;TrustServerCertificate=True;Encrypt=True;MultipleActiveResultSets=true;
      - MessageQueueSettings__Host=rabbitmq
      - MessageQueueSettings__UserName=rabbitmquser
      - MessageQueueSettings__Password=rabbitmqPassword12!
    restart: on-failure
    networks:
      - wod-it-easy-network
    depends_on:
      rabbitmq:
        condition: service_healthy
      sqlserver:
        condition: service_started

  profile:
    container_name: wod-it-easy-profile
    build:
      context: ./server
      dockerfile: Profile/Profile.StartUp/Dockerfile
    ports:
      - "5002:8080"
    environment:
      - ConnectionStrings__DefaultConnection=Server=wod-it-easy-sql-server;Database=WodItEasyProfileDb;User Id=sa;Password=YourStrong!Password123;TrustServerCertificate=True;Encrypt=True;MultipleActiveResultSets=true;
      - MessageQueueSettings__Host=rabbitmq
      - MessageQueueSettings__UserName=rabbitmquser
      - MessageQueueSettings__Password=rabbitmqPassword12!
    restart: on-failure
    networks:
      - wod-it-easy-network
    depends_on:
      rabbitmq:
        condition: service_healthy
      sqlserver:
        condition: service_started

  email-sender:
    container_name: wod-it-easy-email-sender
    build:
      context: ./server
      dockerfile: EmailSender/EmailSender.StartUp/Dockerfile
    ports:
      - "5003:8080"
    environment:
      - ConnectionStrings__DefaultConnection=Server=wod-it-easy-sql-server;Database=WodItEasyEmailSenderDb;User Id=sa;Password=YourStrong!Password123;TrustServerCertificate=True;Encrypt=True;MultipleActiveResultSets=true;
      - MessageQueueSettings__Host=rabbitmq
      - MessageQueueSettings__UserName=rabbitmquser
      - MessageQueueSettings__Password=rabbitmqPassword12!
    restart: on-failure
    networks:
      - wod-it-easy-network
    depends_on:
      rabbitmq:
        condition: service_healthy
      sqlserver:
        condition: service_started

  # client:
  #   container_name: wod-it-easy-client
  #   build:
  #     context: ./client
  #     dockerfile: Dockerfile
  #   ports:
  #     - "3001:80"
  #   networks:
  #     - wod-it-easy-network
  #   depends_on:
  #     - identity
  #     - workouts
  #     - profile
  #     - email-sender

networks:
  wod-it-easy-network:

volumes:
  sqldata:
  rabbitmq:
